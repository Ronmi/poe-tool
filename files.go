// Code generated by go-bindata.
// sources:
// main.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainUi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x41\x6f\x2a\x37\x10\xc7\xef\xf9\x14\xae\xaf\x15\x21\xc9\xbb\xf4\x00\xfb\xa4\x4a\x7d\xb9\x56\x6a\xda\x1e\xad\x59\x7b\x58\xdc\x78\x3d\xae\x3d\xb0\x49\x3f\x7d\xb5\x40\x5e\x20\x2c\x61\xd9\xe4\x81\x56\xda\x1b\x62\xfd\xb7\x67\xfe\xfe\x31\xc3\xca\x9e\x7c\x7d\x2a\x9d\x58\x62\x4c\x96\xfc\x54\xde\x5e\xdf\x48\x81\x5e\x93\xb1\xbe\x98\xca\x3f\x1f\xbe\x8d\x7e\x91\x5f\xb3\xab\xc9\x4f\xa3\x91\xb8\x47\x8f\x11\x18\x8d\xa8\x2c\xcf\x45\xe1\xc0\xa0\xf8\x72\x7d\x77\x73\x7d\x23\x46\xa3\xec\x6a\x62\x3d\x63\x9c\x81\xc6\xec\x4a\x88\x49\xc4\x7f\x17\x36\x62\x12\xce\xe6\x53\x59\xf0\xe3\xcf\xf2\x75\xa1\x5a\x26\xc7\xab\x71\x94\xff\x83\x9a\x85\x76\x90\xd2\x54\xde\xf3\xe3\xdf\xd6\x1b\xaa\xa4\xb0\x66\x2a\xab\x48\xc4\xb2\x1e\x27\xc4\x24\x44\x0a\x18\xf9\x59\x78\x28\x71\x2a\x35\x78\x35\x23\xbd\x48\x32\xfb\x06\x2e\xe1\x64\xfc\x32\xa0\x79\x3c\x5b\x76\x28\x05\x47\xf0\xc9\x01\x43\xee\x70\x2a\x9f\x31\xc9\xec\x77\xfa\x4d\x30\x91\x4b\xc7\xa6\xa8\x56\xa1\xa9\x40\xc9\xb2\x25\x2f\x33\x8d\x75\xce\xc7\x64\x06\x13\x47\x7a\x56\xb5\x6f\x2a\x40\x44\xcf\x32\x7b\x88\x8b\xa3\x21\x5b\x4d\x5e\xd5\x1f\x65\x86\x65\xee\xb0\x1c\x19\x9c\xc1\xc2\xf1\x31\xe1\x1c\x92\x8a\x98\xec\x7f\xa8\x8a\x68\xc3\x81\xd5\xf4\xdc\x3a\xb3\xfe\xdc\xb4\x11\xbf\xd2\x93\x7c\x79\xba\xbf\xc4\xd2\x26\x9b\x3b\x6c\x9e\xba\xcb\x7e\x35\x69\x28\x5a\xf4\x0c\x6b\xb3\x97\x18\xd9\x6a\x70\x6d\x84\x29\x80\xb6\xbe\x90\xd9\xed\x4d\x9b\xe1\x39\x24\x74\xd6\xe3\xd6\xd6\xe6\xc4\x4c\x65\xa3\x78\xc7\xb7\x66\xef\xee\xa3\x35\x72\x7b\x48\x07\x03\xbb\x9a\xd8\xa4\x8b\x54\xa9\xef\x9e\x7c\x69\xbd\x1a\xb9\x45\xe9\x3b\x08\xeb\xe5\xe6\x54\x52\x81\x1e\xa9\x0e\xf6\xa4\x1c\xd7\xab\xb6\xd7\xef\xed\xc7\x01\x9e\x17\xcc\xe4\xd7\x85\x25\x67\xaf\x52\x65\x59\xcf\x95\x03\x5f\x28\xf4\xf2\xed\x04\xfb\x81\x39\xc8\xd1\x35\x56\x90\x7c\x35\xf5\xa1\x00\x3b\xef\xfe\x11\x02\x4e\x95\x46\xd4\x68\x97\x98\xd4\xa6\x8a\xb4\x98\x21\xd9\xc2\x83\x7b\x59\xda\x59\xfd\x88\x46\x8a\x39\x78\xe3\x30\x36\xda\x28\x52\x05\x21\xa0\x99\x4a\x4f\xeb\x12\xbf\x33\xe1\x78\xbd\x2d\x7b\xdf\x07\xd0\x8f\xd6\x17\x2d\x36\x01\x67\xac\x80\x19\xf4\x5c\x66\x8d\x3f\xee\x43\x4a\xa6\xd0\x46\x38\x19\x37\xc6\x32\x19\x37\x60\xd6\x15\x3d\xeb\x13\x2b\x8e\x60\xb0\x04\x1d\x69\x60\xaf\x23\x7b\x6f\x7d\x3c\x2b\x7c\xb7\x3d\x85\x4f\x43\x48\x77\x9a\xa3\x1b\xb0\xeb\x88\xdd\xab\x83\x67\x05\xee\xae\xa7\xc0\x6d\x77\x08\xae\x06\xea\x3e\xa1\xd1\x72\xd5\x93\x46\xfb\x4e\x91\x3c\x5b\xa3\x0d\x94\x0f\xd0\x7d\xa4\xc3\xd6\x06\xf6\xa3\xb5\x5e\x18\xb7\x88\x89\x29\xe2\xaa\x41\x0c\xc8\x75\x44\x6e\xc7\xc4\x7e\x34\xd8\x0b\x63\x67\xa8\xf2\x8e\xc0\xa8\x99\x75\x8c\x71\x40\xaf\x2b\x7a\x7b\x46\xf6\xa3\xc9\xbe\xc3\xed\x39\xf0\x5b\x84\x01\xbe\x4f\x80\xef\x8d\x8d\xfd\x68\xb8\x17\x46\xcf\x96\x81\x22\x6f\x3c\x1b\xc8\xeb\xfa\x27\x6f\xc7\xc5\x7e\xb4\xdc\x0b\x83\xe7\x60\xe1\xeb\x30\x06\xe2\x3a\x11\xb7\xb1\xaf\x1f\xa8\x1d\x3c\xf6\x38\x6b\x7b\xd5\xb3\x62\xc0\xed\x63\xad\xb5\xb6\xb0\x1f\x6d\xf5\xc2\xc8\x7d\xff\x1f\x3c\x40\xf7\x09\x2f\x13\x67\xc7\xae\xf3\x8b\xc4\xa7\x60\xd7\x94\x4c\x73\x22\x6f\x43\xc1\xa7\x00\xde\x9c\x78\xb4\x3d\xb3\xce\x9d\x76\xc0\xfc\x7a\xc8\x7f\xc0\xa8\x86\x5c\xf7\xf2\x6c\x73\x0b\xe0\x0f\x1d\xc9\x39\x34\x9b\x2b\x2d\xef\x47\xf5\xd1\xfb\x00\xa7\xc8\x96\x2f\x4e\x9f\x22\x9a\xa7\x55\x3a\x39\x44\x15\xc8\x59\xfd\x2c\x33\x8f\xcb\xfd\xeb\x2f\x87\xf4\x69\x0e\x86\x2a\xc5\xcf\x01\x65\x66\x0f\x16\x85\xb6\x35\xeb\x01\x9f\xf8\x2f\x8b\x9b\x9b\x42\x8e\x8a\xc2\xfa\xa2\xcd\xdb\xe7\x25\x2a\x4c\x2b\xc3\x9b\x84\x68\xec\xaa\x9e\x1e\xf9\x51\x34\x49\xab\x08\x41\x95\x64\x50\x66\x15\x45\x73\x8a\x14\xb4\xc6\xc0\x49\x31\xe4\x1d\x16\x2e\xc9\x53\x0a\xa0\x8f\x5a\xdc\x5c\xf6\x7e\x48\x49\x39\x05\xf4\x8f\x54\x94\x03\x1d\xff\x78\x45\xd9\x4d\x71\xeb\xe1\xeb\x83\xc9\x78\xeb\x8a\xdd\xff\x01\x00\x00\xff\xff\x3b\xf5\x2b\x07\xbb\x27\x00\x00")

func mainUiBytes() ([]byte, error) {
	return bindataRead(
		_mainUi,
		"main.ui",
	)
}

func mainUi() (*asset, error) {
	bytes, err := mainUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.ui", size: 10171, mode: os.FileMode(420), modTime: time.Unix(1517599146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.ui": mainUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"main.ui": &bintree{mainUi, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

