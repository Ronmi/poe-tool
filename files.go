// Code generated by go-bindata.
// sources:
// main.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainUi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xc1\x6e\xe3\x36\x10\x86\xef\x79\x0a\x96\xd7\xc2\x71\x92\xbd\xf4\x60\x6b\x81\x02\xdd\x5c\x0b\x34\x6d\x8f\xc4\x88\x1c\xcb\x6c\x28\x0e\x4b\x8e\xad\xa4\x4f\x5f\xc8\x76\x1a\x3b\x96\x63\x59\x49\xed\x15\xa0\x9b\x11\xf1\x27\x67\x7e\x7e\x9a\x51\x40\x4e\xbe\x3e\x95\x4e\x2c\x31\x26\x4b\x7e\x2a\x6f\xaf\x6f\xa4\x40\xaf\xc9\x58\x5f\x4c\xe5\xef\x0f\xdf\x46\x3f\xc9\xaf\xd9\xd5\xe4\x87\xd1\x48\xdc\xa3\xc7\x08\x8c\x46\x54\x96\xe7\xa2\x70\x60\x50\x7c\xb9\xbe\xbb\xb9\xbe\x11\xa3\x51\x76\x35\xb1\x9e\x31\xce\x40\x63\x76\x25\xc4\x24\xe2\xdf\x0b\x1b\x31\x09\x67\xf3\xa9\x2c\xf8\xf1\x47\xf9\xba\x50\x2d\x93\xe3\xd5\x38\xca\xff\x42\xcd\x42\x3b\x48\x69\x2a\xef\xf9\xf1\x4f\xeb\x0d\x55\x52\x58\x33\x95\x55\x24\x62\x59\x8f\x13\x62\x12\x22\x05\x8c\xfc\x2c\x3c\x94\x38\x95\x1a\xbc\x9a\x91\x5e\x24\x99\x7d\x03\x97\x70\x32\x7e\x19\xd0\x3c\x9e\x2d\x3b\x94\x82\x23\xf8\xe4\x80\x21\x77\x38\x95\xcf\x98\x64\xf6\x2b\xfd\x22\x98\xc8\xa5\x63\x53\x54\xab\xd0\x54\xa0\x64\xd9\x92\x97\x99\xc6\x3a\xe7\x63\x32\x83\x89\x23\x3d\xab\xda\x37\x15\x20\xa2\x67\x99\x3d\xc4\xc5\xd1\x90\xad\x26\xaf\xea\x9f\x32\xc3\x32\x77\x58\x8e\x0c\xce\x60\xe1\xf8\x98\x70\x0e\x49\x45\x4c\xf6\x1f\x54\x45\xb4\xe1\xc0\x6a\x7a\x6e\x9d\x59\xff\x6e\xda\x88\x9f\xe9\x49\xbe\x3c\xdd\x5f\x62\x69\x93\xcd\x1d\x36\x4f\xdd\x65\xbf\x9a\x34\x14\x2d\x7a\x86\xb5\xd9\x4b\x8c\x6c\x35\xb8\x36\xc2\x14\x40\x5b\x5f\xc8\xec\xf6\xa6\xcd\xf0\x1c\x12\x3a\xeb\x71\x6b\x6b\x73\x62\xa6\xb2\x51\xbc\xe3\x5b\xb3\x77\xf7\xd1\x1a\xb9\x3d\xa4\x83\x81\x5d\x4d\x6c\xd2\x45\xaa\xd4\x7f\x9e\x7c\x69\xbd\x1a\xb9\x45\xe9\x3b\x08\xeb\xe5\xe6\x54\x52\x81\x1e\xa9\x0e\xf6\xa4\x1c\xd7\xab\xb6\xd7\xef\xed\xc7\x01\x9e\x17\xcc\xe4\xd7\x85\x25\x67\xaf\x52\x65\x59\xcf\x95\x03\x5f\x28\xf4\xf2\xed\x04\xfb\x81\x39\xc8\xd1\x35\x56\x90\x7c\x35\xf5\xa1\x00\x3b\xef\xfe\x11\x02\x4e\x95\x46\xd4\x68\x97\x98\xd4\xa6\x8a\xb4\x98\x21\xd9\xc2\x83\x7b\x59\xda\x59\xfd\x88\x46\x8a\x39\x78\xe3\x30\x36\xda\x28\x52\x05\x21\xa0\x99\x4a\x4f\xeb\x12\xbf\x33\xe1\x78\xbd\x2d\x7b\x7f\x0f\xa0\x1f\xad\x2f\x5a\x6c\x02\xce\x58\x01\x33\xe8\xb9\xcc\x1a\x5f\xee\x43\x4a\xa6\xd0\x46\x38\x19\x37\xc6\x32\x19\x37\x60\xd6\x15\x3d\xeb\x13\x2b\x8e\x60\xb0\x04\x1d\x69\x60\xaf\x23\x7b\x6f\x7d\x3c\x2b\x7c\xb7\x3d\x85\x4f\x43\x48\x77\x9a\xa3\x1b\xb0\xeb\x88\xdd\xab\x83\x67\x05\xee\xae\xa7\xc0\x6d\x77\x08\xae\x06\xea\x3e\xa1\xd1\x72\xd5\x93\x46\xfb\x4e\x91\x3c\x5b\xa3\x0d\x94\x0f\xd0\x7d\xa4\xc3\xd6\x06\xf6\xa3\xb5\x5e\x18\xb7\x88\x89\x29\xe2\xaa\x41\x0c\xc8\x75\x44\x6e\xc7\xc4\x7e\x34\xd8\x0b\x63\x67\xa8\xf2\x8e\xc0\xa8\x99\x75\x8c\x71\x40\xaf\x2b\x7a\x7b\x46\xf6\xa3\xc9\xbe\xc3\xed\x39\xf0\x5b\x84\x01\xbe\x4f\x80\xef\x8d\x8d\xfd\x68\xb8\x17\x46\xcf\x96\x81\x22\x6f\x3c\x1b\xc8\xeb\xfa\x91\xb7\xe3\x62\x3f\x5a\xee\xf7\x51\xf3\xf4\xac\x18\xa8\xfb\x58\xbd\xab\x2d\xec\x47\x9b\x3d\x78\xfc\x71\xe6\xaf\xbc\x01\xba\x4f\xf8\xc2\x3b\x3b\x76\x9d\x5b\xec\x85\xb1\x73\xb0\xf0\x75\x18\x03\x70\x9d\x80\xdb\xd8\xd7\x8f\xa6\xfa\x29\xa8\x35\x25\xd3\x9c\xc8\xdb\x50\xf0\x29\x80\x37\x27\x1e\x6d\xcf\xac\x73\xa7\x1d\x30\xbf\x1e\xf2\x1f\x68\x05\x0d\xb9\xee\xe5\xd9\xe6\x16\xc0\x6f\x3a\x92\x73\x68\x36\x57\x5a\xde\x8f\xea\xa3\xf7\x01\x4e\x91\x2d\x5f\x9c\x3e\x45\x34\x4f\xab\x74\x72\x88\x2a\x90\xb3\xfa\x59\x66\x1e\x97\xfb\xd7\x5f\x0e\xe9\xd3\x1c\x0c\x55\x8a\x9f\x03\xca\xcc\x1e\x2c\x07\x6d\xeb\xd4\x03\x3e\xf1\x1f\x16\x37\x37\x85\x1c\x15\x85\xf5\x45\x9b\xff\x3e\x2f\x51\x5b\x5a\x19\xde\x24\x44\x63\x57\x95\xf4\xc8\x4b\xd1\x24\xad\x22\x04\x55\x92\x41\x99\x55\x14\xcd\x29\x52\xd0\x1a\x03\x27\xc5\x90\x77\x58\xb8\x24\x4f\x29\x80\x3e\x6a\x71\x73\xd9\xfb\x5f\x4a\xca\x29\xa0\x7f\xa4\xa2\x1c\xe8\xf2\xc7\x2b\xca\x6e\x8a\x5b\x0f\x5f\x1f\x4c\xc6\x5b\x57\xec\xfe\x0d\x00\x00\xff\xff\x34\xad\x40\xdf\xbb\x27\x00\x00")

func mainUiBytes() ([]byte, error) {
	return bindataRead(
		_mainUi,
		"main.ui",
	)
}

func mainUi() (*asset, error) {
	bytes, err := mainUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.ui", size: 10171, mode: os.FileMode(420), modTime: time.Unix(1517485651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.ui": mainUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"main.ui": &bintree{mainUi, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

