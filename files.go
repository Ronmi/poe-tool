// Code generated by go-bindata.
// sources:
// main.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainUi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x41\x6f\x32\x37\x10\x86\xef\xf9\x15\xae\xaf\x15\x21\xc9\x77\xe9\x01\xf6\x93\x2a\x35\xb9\x56\x6a\xda\x1e\xad\x59\x7b\x58\xa6\xf1\x7a\x5c\x7b\x60\x43\x7f\x7d\x05\x24\x0d\x84\x25\x2c\x9b\x34\x11\x12\x37\x94\xf5\xeb\x99\x79\xfd\x30\x13\xad\x19\x7d\x7f\xac\xbd\x9a\x63\xca\xc4\x61\xac\xaf\x2f\xaf\xb4\xc2\x60\xd9\x51\xa8\xc6\xfa\xf7\xfb\xdb\xc1\x4f\xfa\x7b\x71\x31\xfa\x61\x30\x50\x77\x18\x30\x81\xa0\x53\x0d\xc9\x54\x55\x1e\x1c\xaa\x6f\x97\x37\x57\x97\x57\x6a\x30\x28\x2e\x46\x14\x04\xd3\x04\x2c\x16\x17\x4a\x8d\x12\xfe\x3d\xa3\x84\x59\x79\x2a\xc7\xba\x92\x87\x1f\xf5\x4b\xa0\xa5\x4c\x0f\x57\xeb\xb8\xfc\x0b\xad\x28\xeb\x21\xe7\xb1\xbe\x93\x87\x3f\x29\x38\x6e\xb4\x22\x37\xd6\x4d\x62\x16\xbd\x5c\xa7\xd4\x28\x26\x8e\x98\x64\xa1\x02\xd4\x38\xd6\x16\x82\x99\xb0\x9d\x65\x5d\xdc\x82\xcf\x38\x1a\x3e\x2f\x68\x5f\x2f\x24\x1e\xb5\x92\x04\x21\x7b\x10\x28\x3d\x8e\xf5\x02\xb3\x2e\x7e\xe5\x5f\x94\x30\xfb\x7c\x68\x8b\x66\x95\x9a\x89\x9c\x49\x88\x83\x2e\x2c\x2e\x6b\x3e\x24\x73\x98\x25\xf1\xc2\x2c\x7d\x33\x11\x12\x06\xd1\xc5\x7d\x9a\x1d\x4c\x99\x2c\x07\xb3\xfc\xa8\x0b\xac\x4b\x8f\xf5\xc0\xe1\x04\x66\x5e\x0e\x09\xa7\x90\x4d\xc2\x4c\xff\xa0\xa9\x12\xc5\x3d\xd1\xec\x94\xbc\x5b\x7f\x6e\x3b\x88\x9f\xf9\x51\x3f\x3f\xdd\x0d\x31\xa7\x4c\xa5\xc7\xf6\xad\xfb\x9c\x57\x9b\x86\x13\x61\x10\x58\x9b\x3d\xc7\x24\x64\xc1\x77\x11\xe6\x08\x96\x42\xa5\x8b\xeb\xab\x2e\xcb\x4b\xc8\xe8\x29\xe0\xc6\xd1\x96\x2c\xc2\x75\xab\x78\xcb\xb7\x76\xef\xee\x12\x39\xbd\xb9\xa4\x87\x81\x7d\x4d\x6c\xd3\x25\x6e\xcc\x7f\x9e\x7c\xeb\x1c\x8d\xfd\xac\x0e\x3d\x84\xcb\x70\x53\xae\xb9\xc2\x80\xbc\x4c\xf6\xa8\x1a\xd7\x51\xbb\xeb\x77\xce\x63\x0f\xcf\x33\x11\x0e\xeb\xc6\x52\x4a\x30\xb9\x21\xb1\x53\xe3\x21\x54\x06\x83\x7e\xbd\xc1\x6e\x62\x1e\x4a\xf4\xad\x1d\xa4\x5c\x6d\xbd\x2f\xc1\xde\xa7\x7f\x80\x80\x63\xa5\x09\x2d\xd2\x1c\xb3\x79\xea\x22\x1d\x76\xc8\x54\x05\xf0\xcf\xa1\x3d\xd9\x07\x74\x5a\x4d\x21\x38\x8f\xa9\xd5\x46\x95\x1b\x88\x11\xdd\x58\x07\x5e\xb7\xf8\xad\x0d\x87\xeb\x63\xd9\xf9\x7b\x04\xfb\x40\xa1\xea\x70\x08\x38\x11\x03\x22\x60\xa7\xba\x68\xfd\x72\xef\x53\x0a\xc7\x2e\xc2\xd1\xb0\x35\x97\xd1\xb0\x05\xb3\xbe\xe8\x51\xc8\x62\x24\x81\xc3\x1a\x6c\xe2\x33\x7b\x3d\xd9\x7b\xed\xe3\xa7\xc2\x77\x7d\xa2\xf0\x59\x88\xf9\xc6\x4a\xf2\x67\xec\x7a\x62\xf7\xe2\xe0\xa7\x02\x77\x73\xa2\xc0\x6d\x4e\x08\x69\xce\xd4\x7d\xc0\xa0\x95\xe6\x44\x06\xed\x1b\x4d\xf2\xd3\x06\x6d\xe4\xf2\x0c\xdd\x7b\x26\xec\xd2\xc0\xd3\x18\xad\x5f\x8c\x5b\xc2\x2c\x9c\x70\x35\x20\xce\xc8\xf5\x44\x6e\xcb\xc4\xd3\x18\xb0\x5f\x8c\x9d\xe3\x26\x78\x06\x67\x26\xe4\x05\xd3\x19\xbd\xbe\xe8\xed\x18\x79\x1a\x43\xf6\x0d\x6e\x3f\x03\xbf\x59\x3c\xc3\xf7\x01\xf0\xbd\xb2\xf1\x34\x06\xee\x17\xa3\x47\x75\xe4\x24\x4f\x9e\x9d\xc9\xeb\xfb\x4f\xde\x96\x8b\xa7\x31\x72\x3f\x04\xbc\xb6\x62\xda\x0b\x79\x9d\x0a\x3e\x46\x08\xee\xc8\xb7\xf0\x13\xf2\xfe\xb8\x77\xe1\x2f\xf7\x11\x7b\x86\x43\x4b\xad\x3b\x75\x76\xb9\xb0\xf8\xcd\x26\xf6\x1e\xdd\xd3\xed\xdb\xdb\x59\xbd\xf7\xea\xe2\x18\xd9\xfc\xd9\xe9\x63\x44\xd3\xbc\x2a\xa7\x84\x64\x22\x7b\xb2\x0b\x5d\x04\x9c\xef\xde\xd4\xed\xd3\xe7\x29\x38\x6e\x8c\x2c\x22\xea\x82\xf6\x76\x85\xae\x5d\xeb\x1e\x1f\xe5\x0f\xc2\xa7\x4b\x4d\xcf\x55\x45\xa1\xea\x32\x28\xbf\xa2\xc5\x74\x32\xbc\x4d\x88\x8e\x56\x0d\xf5\xc0\x97\xa2\x4d\xda\x24\x88\xa6\x66\x87\xba\x68\x38\xb9\x63\xa4\x60\x2d\x46\xc9\x46\xa0\xec\x11\xb8\xe6\xc0\x39\x82\x3d\x68\x71\x7b\xdb\xfb\x5f\x5a\xca\x31\xa0\xbf\xa7\xa3\xec\x99\xf9\x87\x3b\xca\x76\x89\x1b\x0f\x5f\x1e\x8c\x86\x1b\xbf\x06\xf8\x37\x00\x00\xff\xff\xc6\x5f\x9e\x1f\x66\x20\x00\x00")

func mainUiBytes() ([]byte, error) {
	return bindataRead(
		_mainUi,
		"main.ui",
	)
}

func mainUi() (*asset, error) {
	bytes, err := mainUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.ui", size: 8294, mode: os.FileMode(420), modTime: time.Unix(1516455289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.ui": mainUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"main.ui": &bintree{mainUi, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

